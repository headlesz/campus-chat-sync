import { useState, useEffect } from "react";
import SwipeCard from "@/components/SwipeCard";
import MatchModal from "@/components/MatchModal";
import FilterModal from "@/components/FilterModal";
import { Button } from "@/components/ui/button";
import { Heart, MessageCircle, User, MapPin, Sparkles, Users, Filter } from "lucide-react";
import { useNavigate } from "react-router-dom";
import { toast } from "sonner";
import { useUser } from "@/contexts/UserContext";
import { DiscoveryService, FilterCriteria, UserProfile } from "@/services/DiscoveryService";

type Mode = "dating" | "friends";

interface SimpleProfile {
  id: string;
  name: string;
  age: number;
  school: string;
  major: string;
  graduationYear: number;
  mode: Mode;
  bio: string;
  photo: string;
  interests: string[];
  gpa: number;
  shareGPA: boolean;
}

const mockProfiles = [
  {
    id: "1",
    name: "Jamie",
    age: 21,
    school: "Stanford University",
    major: "AI & Machine Learning",
    graduationYear: 2025,
    mode: "dating" as const,
    bio: "Passionate about technology and making meaningful connections. Love hiking and exploring new cafes.",
    photo: "https://images.unsplash.com/photo-1494790108377-be9c29b29330?w=600",
    interests: ["AI", "Hiking", "Photography"],
    gpa: 3.9,
    shareGPA: true,
  },
  {
    id: "2",
    name: "Morgan",
    age: 22,
    school: "UC Berkeley",
    major: "Product Design",
    graduationYear: 2024,
    mode: "dating" as const,
    bio: "Designer by day, chef by night. Always looking for the next great adventure or coffee shop.",
    photo: "https://images.unsplash.com/photo-1507003211169-0a1dd7228f2d?w=600",
    interests: ["Design", "Cooking", "Travel"],
    gpa: 3.7,
    shareGPA: true,
  },
  {
    id: "3",
    name: "Taylor",
    age: 20,
    school: "MIT",
    major: "Computer Science",
    graduationYear: 2026,
    mode: "friends" as const,
    bio: "Building the future one line of code at a time. When I'm not coding, you'll find me at the climbing gym.",
    photo: "https://images.unsplash.com/photo-1438761681033-6461ffad8d80?w=600",
    interests: ["Coding", "Rock Climbing", "Music"],
    gpa: 3.85,
    shareGPA: false, // This user hasn't opted in to share
  },
];

const Discover = () => {
  const [currentIndex, setCurrentIndex] = useState(0);
  const [showMatch, setShowMatch] = useState(false);
  const [matchedProfile, setMatchedProfile] = useState<UserProfile | null>(null);
  const [profiles, setProfiles] = useState<UserProfile[]>([]);
  const [showFilters, setShowFilters] = useState(false);
  const [isLoading, setIsLoading] = useState(false);
  const [activeFilters, setActiveFilters] = useState<FilterCriteria | null>(null);
  const navigate = useNavigate();
  const { shareGPA, mode, setMode } = useUser();
  const isDating = mode === "dating";
  const mockCurrentUser = { shareGPA: false };

  // Initialize and load profiles with Elasticsearch Labs
  useEffect(() => {
    const initializeDiscovery = async () => {
      setIsLoading(true);
      try {
        console.log('Initializing discovery with Elasticsearch Labs...');
        
        // Try to initialize Elasticsearch Labs
        try {
          await DiscoveryService.initializeIndex();
          console.log('Elasticsearch Labs initialized successfully');
          await loadProfiles();
        } catch (esError) {
          console.warn('Elasticsearch Labs initialization failed, using mock data:', esError);
          // Fallback to mock data
          await loadMockProfiles();
        }
      } catch (error) {
        console.error('Error initializing discovery:', error);
        // Final fallback to mock data
        await loadMockProfiles();
      } finally {
        setIsLoading(false);
      }
    };

    initializeDiscovery();
  }, []);

  // Load mock profiles as fallback
  const loadMockProfiles = async () => {
    console.log('Loading mock profiles...');
    const mockData = mockProfiles.map(profile => ({
      id: profile.id,
      name: profile.name,
      age: profile.age,
      major: profile.major,
      graduationYear: profile.graduationYear,
      interests: profile.interests,
      mode: profile.mode as 'dating' | 'friends',
      gpa: profile.gpa,
      school: profile.school,
      location: { lat: 37.7749, lon: -122.4194 },
      photo: profile.photo,
      bio: profile.bio
    }));
    setProfiles(mockData);
    console.log('Mock profiles loaded successfully');
  };

  // Load profiles from Elasticsearch Labs
  const loadProfiles = async () => {
    try {
      const filters: FilterCriteria = {
        majors: [],
        graduationYearRange: [2024, 2026],
        interests: [],
        mode: mode,
        campusRadius: 5,
        nearbySchools: false,
        gpaRange: [2.0, 4.0],
        ageRange: [18, 25],
        userLocation: { lat: 37.7749, lon: -122.4194 }
      };

      const searchResults = await DiscoveryService.searchProfiles(filters, 'current-user-id');
      if (searchResults && searchResults.length > 0) {
        setProfiles(searchResults);
        console.log(`Loaded ${searchResults.length} profiles from Elasticsearch Labs`);
      } else {
        console.log('No results from Elasticsearch Labs, using mock data');
        await loadMockProfiles();
      }
    } catch (error) {
      console.error('Error loading profiles from Elasticsearch Labs:', error);
      await loadMockProfiles();
    }
  };

  // Apply filters with Elasticsearch Labs
  const handleApplyFilters = async (filters: FilterCriteria) => {
    setIsLoading(true);
    setActiveFilters(filters);
    try {
      console.log('Applying filters with Elasticsearch Labs...');
      const searchResults = await DiscoveryService.searchProfiles(filters, 'current-user-id');
      if (searchResults && searchResults.length > 0) {
        setProfiles(searchResults);
        setCurrentIndex(0);
        toast.success(`Found ${searchResults.length} matches`);
        console.log(`Applied filters: ${searchResults.length} results`);
      } else {
        console.log('No results from Elasticsearch Labs, using mock data');
        await loadMockProfiles();
        toast.info('Using mock data - no Elasticsearch results found');
      }
    } catch (error) {
      console.error('Error applying filters:', error);
      await loadMockProfiles();
      toast.error('Failed to apply filters, using mock data');
    } finally {
      setIsLoading(false);
    }
  };

  // Clear filters
  const handleClearFilters = async () => {
    setActiveFilters(null);
    try {
      await loadProfiles();
      toast.success('Filters cleared');
    } catch (error) {
      console.error('Error clearing filters:', error);
      await loadMockProfiles();
    }
  };

  const handleSwipe = (direction: "left" | "right") => {
    if (direction === "right") {
      // Simulate match (20% chance for demo)
      const isMatch = Math.random() > 0.8;
      if (isMatch && profiles[currentIndex]) {
        setMatchedProfile(profiles[currentIndex]);
        setShowMatch(true);
      } else {
        toast("Liked!", { icon: "❤️" });
      }
    }

    // Move to next profile
    setTimeout(() => {
      if (currentIndex < profiles.length - 1) {
        setCurrentIndex(currentIndex + 1);
      } else {
        toast.success("You're all caught up! Check back later for new people.");
        setCurrentIndex(0);
      }
    }, 300);
  };

  const handleMessage = () => {
    setShowMatch(false);
    navigate("/chat/1");
  };

  const handleKeepSwiping = () => {
    setShowMatch(false);
    if (currentIndex < profiles.length - 1) {
      setCurrentIndex(currentIndex + 1);
    }
  };

  const currentProfile = profiles[currentIndex];

  return (
    <div className="min-h-screen bg-background pb-20">
      {/* Header with Mode Toggle */}
      <div
        className={`px-6 py-4 sticky top-0 z-10 transition-colors duration-300 ${
          isDating ? "bg-primary/20" : "bg-accent/20"
        }`}
      >
        <div className="max-w-7xl mx-auto flex items-center justify-between">
          <h1 className="text-2xl font-bold text-foreground">CampusMatch</h1>

          <div className="flex items-center gap-4">
            {/* Sliding Toggle */}
            <div className="relative bg-white/20 backdrop-blur rounded-full p-1 w-[260px]">
              {/* Slider */}
              <div
                className={`absolute top-1 bottom-1 w-[126px] rounded-full transition-all duration-300 ${
                  isDating ? "left-1 bg-primary" : "left-[131px] bg-accent"
                }`}
                style={{ boxShadow: "0 2px 10px rgba(0,0,0,0.15)" }}
              />
              {/* Options */}
              <div className="relative grid grid-cols-2 gap-0">
                <button
                  onClick={() => setMode("dating")}
                  className={`z-10 flex items-center justify-center gap-2 px-4 py-2 rounded-full font-medium transition-colors ${
                    isDating ? "text-white" : "text-black/80"
                  }`}
                >
                  <Heart className="w-4 h-4" />
                  Dating
                </button>
                <button
                  onClick={() => setMode("friends")}
                  className={`z-10 flex items-center justify-center gap-2 px-4 py-2 rounded-full font-medium transition-colors ${
                    !isDating ? "text-white" : "text-black/80"
                  }`}
                >
                  <Users className="w-4 h-4" />
                  Friends
                </button>
              </div>
            </div>

            {/* Filter Button */}
            <button
              onClick={() => setShowFilters(true)}
              className={`p-2 rounded-full transition-colors ${
                activeFilters ? 'bg-primary/20 text-primary' : 'hover:bg-white/20 text-foreground'
              }`}
              title="Filter matches"
            >
              <Filter className="w-5 h-5" />
            </button>
          </div>
        </div>
      </div>

      {/* Main Content */}
      <div className="max-w-7xl mx-auto px-6 py-8">
        {isLoading ? (
          <div className="flex items-center justify-center py-20">
            <div className="text-center">
              <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-primary mx-auto mb-4"></div>
              <p className="text-muted-foreground">Finding matches...</p>
            </div>
          </div>
        ) : currentProfile ? (
          <div className="relative">
            {/* Background cards for depth */}
            {profiles.slice(currentIndex + 1, currentIndex + 3).map((_, index) => (
              <div
                key={index}
                className="absolute top-0 left-1/2 -translate-x-1/2 w-full max-w-md bg-card rounded-3xl shadow-lg"
                style={{
                  zIndex: -index - 1,
                  transform: `translate(-50%, ${(index + 1) * 8}px) scale(${1 - (index + 1) * 0.03})`,
                  opacity: 1 - (index + 1) * 0.3,
                }}
              />
            ))}

            {/* Active card */}
            <SwipeCard
              key={currentProfile.id}
              profile={currentProfile}
              onSwipe={handleSwipe}
              currentUserSharesGPA={mockCurrentUser.shareGPA}
              mode={mode}
            />
          </div>
        ) : (
          <div className="text-center py-20">
            <h2 className="text-2xl font-bold mb-4">No more profiles!</h2>
            <p className="text-muted-foreground mb-6">
              You've seen everyone in your area. Check back later for new people!
            </p>
            <Button onClick={() => setCurrentIndex(0)}>
              Start Over
            </Button>
          </div>
        )}
      </div>

      {/* Match Modal */}
      {showMatch && matchedProfile && (
        <MatchModal
          match={matchedProfile}
          onMessage={handleMessage}
          onKeepSwiping={handleKeepSwiping}
        />
      )}

      {/* Bottom Navigation */}
      <div
        className={`fixed bottom-0 left-0 right-0 px-6 py-4 transition-colors duration-300 ${
          isDating ? "bg-primary/20" : "bg-accent/20"
        }`}
      >
        <div className="max-w-7xl mx-auto flex items-center justify-around text-foreground">
          <button className="flex flex-col items-center gap-1 text-foreground/90 hover:text-foreground transition-colors">
            <Heart className="w-6 h-6" />
            <span className="text-xs font-medium">Discover</span>
          </button>
          <button
            onClick={() => navigate("/matches")}
            className="flex flex-col items-center gap-1 text-foreground/90 hover:text-foreground transition-colors"
          >
            <MessageCircle className="w-6 h-6" />
            <span className="text-xs font-medium">Matches</span>
          </button>
          <button
            onClick={() => navigate("/recommended")}
            className="flex flex-col items-center gap-1 text-muted-foreground hover:text-foreground transition-colors"
          >
            <Sparkles className="w-6 h-6" />
            <span className="text-xs font-medium">Recommended</span>
          </button>
          <button
            onClick={() => navigate("/profile")}
            className="flex flex-col items-center gap-1 text-black/90 hover:text-black transition-colors"
          >
            <User className="w-6 h-6" />
            <span className="text-xs font-medium">Profile</span>
          </button>
        </div>
      </div>

      {/* Filter Modal */}
      <FilterModal
        isOpen={showFilters}
        onClose={() => setShowFilters(false)}
        onApplyFilters={handleApplyFilters}
        onClearFilters={handleClearFilters}
      />
    </div>
  );
};

export default Discover;
